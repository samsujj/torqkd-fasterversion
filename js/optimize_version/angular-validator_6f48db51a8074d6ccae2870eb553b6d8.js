angular.module('angularValidator',[]);angular.module('angularValidator').directive('angularValidator',function(){return{restrict:'A',link:function(scope,element,attrs,fn){var DOMForm=angular.element(element)[0];var form_name=DOMForm.attributes['name'].value;var scopeForm=scope[form_name];scopeForm.submitted=false;scope.$watch(function(){return DOMForm.length;},function(){setupWatches(DOMForm);});element.on('submit',function(event){event.preventDefault();scope.$apply(function(){scopeForm.submitted=true;});if(scopeForm.$valid){scope.$apply(function(){scope.$eval(DOMForm.attributes["angular-validator-submit"].value);});}});scopeForm.reset=function(){for(var i=0;i<DOMForm.length;i++){if(DOMForm[i].name){scopeForm[DOMForm[i].name].$setViewValue("");scopeForm[DOMForm[i].name].$render();}}
scopeForm.submitted=false;scopeForm.$setPristine();};setupWatches(DOMForm);function setupWatches(formElement){for(var i=0;i<formElement.length;i++){if(i in formElement){setupWatch(formElement[i]);}}}
function setupWatch(elementToWatch){if(elementToWatch.isWatchedByValidator){return;}
elementToWatch.isWatchedByValidator=true;if("validate-on"in elementToWatch.attributes&&elementToWatch.attributes["validate-on"].value==="blur"){angular.element(elementToWatch).on('blur',function(){updateValidationMessage(elementToWatch);updateValidationClass(elementToWatch);});}
scope.$watch(function(){return elementToWatch.value+elementToWatch.required+scopeForm.submitted+checkElementValidity(elementToWatch)+getDirtyValue(scopeForm[elementToWatch.name])+getValidValue(scopeForm[elementToWatch.name]);},function(){if(scopeForm.submitted){updateValidationMessage(elementToWatch);updateValidationClass(elementToWatch);}
else{isDirtyElement="validate-on"in elementToWatch.attributes&&elementToWatch.attributes["validate-on"].value==="dirty";if(isDirtyElement){updateValidationMessage(elementToWatch);updateValidationClass(elementToWatch);}
else if(scopeForm[elementToWatch.name]&&scopeForm[elementToWatch.name].$pristine){updateValidationMessage(elementToWatch);updateValidationClass(elementToWatch);}}});}
function getDirtyValue(element){if(element){if("$dirty"in element){return element.$dirty;}}}
function getValidValue(element){if(element){if("$valid"in element){return element.$valid;}}}
function checkElementValidity(element){if("validator"in element.attributes){var isElementValid=scope.$eval(element.attributes.validator.value);scopeForm[element.name].$setValidity("angularValidator",isElementValid);return isElementValid;}}
function updateValidationMessage(element){var defaultRequiredMessage=function(){return"<i class='fa fa-times'></i> Required";};var defaultInvalidMessage=function(){return"<i class='fa fa-times'></i> Invalid";};if(!(element.name in scopeForm)){return;}
var scopeElementModel=scopeForm[element.name];var validationMessageElement=isValidationMessagePresent(element);if(validationMessageElement){validationMessageElement.remove();}
if(scopeElementModel.$dirty||scope[element.form.name]&&scope[element.form.name].submitted){if(scopeElementModel.$error.required){if("required-message"in element.attributes){angular.element(element).after(generateErrorMessage(element.attributes['required-message'].value));}
else{angular.element(element).after(generateErrorMessage(defaultRequiredMessage));}}else if(!scopeElementModel.$valid){if("invalid-message"in element.attributes){angular.element(element).after(generateErrorMessage(element.attributes['invalid-message'].value));}
else{angular.element(element).after(generateErrorMessage(defaultInvalidMessage));}}}}
function generateErrorMessage(messageText){return"<label class='control-label has-error validationMessage'>"+scope.$eval(messageText)+"</label>";}
function isValidationMessagePresent(element){var elementSiblings=angular.element(element).parent().children();for(var i=0;i<elementSiblings.length;i++){if(angular.element(elementSiblings[i]).hasClass("validationMessage")){return angular.element(elementSiblings[i]);}}
return false;}
function updateValidationClass(element){if(!(element.name in scopeForm)){return;}
var formField=scopeForm[element.name];angular.element(element).removeClass('has-error');angular.element(element.parentNode).removeClass('has-error');if(formField.$dirty||scope[element.form.name]&&scope[element.form.name].submitted){if(formField.$invalid){angular.element(element.parentNode).addClass('has-error');angular.element(element).addClass('has-error');}}}}};});